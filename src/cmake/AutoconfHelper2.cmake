include(AutoconfHelper)
include(CheckLibraryExists)

function(ac_header_stdbool)
    ac_check_headers(stdbool.h)
    ac_check_type(_Bool)
endfunction()

function(ac_header_dirent)
    ac_check_headers(dirent.h)
endfunction()

function(ac_func_memcmp)
    ac_check_funcs(memcmp)
endfunction()

function(ac_func_realloc)
    ac_check_funcs(realloc)
endfunction()

function(ac_func_stat)
    ac_check_funcs(stat)
endfunction()

function(ac_func_strftime)
    ac_check_funcs(strftime)
endfunction()

function(ac_func_utime_null)
    ac_check_funcs(utime)
    if(HAVE_UTIME)
        set(HAVE_UTIME_NULL "${HAVE_UTIME}" PARENT_SCOPE)
    endif()
endfunction()

function(ac_func_vprintf)
    ac_check_funcs(vprintf)
endfunction()

function(ac_func_getmntent)
    ac_check_funcs(getmntent)
endfunction()

function(ac_func_select_argtypes)
    set(SELECT_TYPE_ARG1 "int" PARENT_SCOPE)
    set(SELECT_TYPE_ARG234 "(fd_set *)" PARENT_SCOPE)
    set(SELECT_TYPE_ARG5 "(struct timeval *)" PARENT_SCOPE)
endfunction()

function(ac_type_signal)
    set(RETSIGTYPE "void" PARENT_SCOPE)
endfunction()

function (ac_check_lib libname func)
    string(TOUPPER ${libname} var)
    set(var "HAVE_LIB${var}")
    set(${var})
    check_library_exists(${libname} ${func} "" ${var})
    if (${var})
        set(${var} yes PARENT_SCOPE)
    endif()
endfunction()

function(ac_check_files)
    foreach(file ${ARGV})
        set(check_message "Looking for file ${file}")
        string(TOUPPER ${file} upfile)
        string(REPLACE "." "_" upfile ${upfile})
        string(REPLACE "/" "_" upfile ${upfile})
        set(have_file_ver "HAVE_${upfile}")
        if(EXISTS "${file}")
            message(STATUS "${check_message} -- found")
            set("${have_file_ver}" 1 PARENT_SCOPE)
        else()
            message(STATUS "${check_message} -- not found")
            unset("${have_file_ver}" PARENT_SCOPE)
        endif()
    endforeach()
endfunction()
